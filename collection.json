{
	"info": {
		"_postman_id": "ov-recorder-ha-controller-final",
		"name": "OV Recorder HA Controller API - Complete",
		"description": "Complete API collection for OpenVidu Recorder HA Controller with all endpoints.",
		"version": "3.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "basic",
		"basic": [
			{"key": "username", "value": "{{username}}", "type": "string"},
			{"key": "password", "value": "{{password}}", "type": "string"}
		]
	},
	"variable": [
		{"key": "base_url", "value": "http://localhost:8080", "type": "string"},
		{"key": "username", "value": "recorder", "type": "string"},
		{"key": "password", "value": "rec0rd3r_2024!", "type": "string"},
		{"key": "session_id", "value": "test-session-001", "type": "string"}
	],
	"item": [
		{
			"name": "Health & Monitoring",
			"item": [
				{
					"name": "Service Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/health",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "health"]
						}
					}
				},
				{
					"name": "SpringBoot Actuator Health",
					"request": {
						"auth": {"type": "noauth"},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": ["{{base_url}}"],
							"path": ["actuator", "health"]
						}
					}
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Create Recording Session",
					"request": {
						"method": "POST",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionId\": \"{{session_id}}\",\n  \"clientId\": \"recorder-container01\",\n  \"clientHost\": \"192.168.1.100\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions"]
						}
					}
				},
				{
					"name": "Get Session by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}"]
						}
					}
				},
				{
					"name": "List All Active Sessions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions"]
						}
					}
				},
				{
					"name": "Check if Session is Active",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/active",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "active"]
						}
					}
				}
			]
		},
		{
			"name": "Heartbeat & Monitoring",
			"item": [
				{
					"name": "Send Heartbeat with Chunk Info",
					"request": {
						"method": "PUT",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lastChunk\": \"0003.mp4\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/heartbeat",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "heartbeat"]
						}
					}
				},
				{
					"name": "Send Simple Heartbeat",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/heartbeat",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "heartbeat"]
						}
					}
				}
			]
		},
		{
			"name": "Session Lifecycle",
			"item": [
				{
					"name": "Deactivate Session (Soft Delete)",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/deactivate",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "deactivate"]
						},
						"description": "Marks session as inactive (active=false) but keeps record in Redis."
					}
				},
				{
					"name": "Update Session Status",
					"request": {
						"method": "PUT",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"RECORDING\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "status"]
						},
						"description": "Updates session status. Valid values: STARTING, RECORDING, PAUSED, STOPPING, COMPLETED, FAILED, INACTIVE"
					}
				},
				{
					"name": "Update Recording Path",
					"request": {
						"method": "PUT",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recordingPath\": \"/recordings/session-001/video.mp4\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/recording-path",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "recording-path"]
						},
						"description": "Updates the recording file path for a session"
					}
				},
				{
					"name": "Stop Session",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/stop",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "stop"]
						},
						"description": "Stops a session (marks as STOPPING then COMPLETED)"
					}
				},
				{
					"name": "Remove Session (Hard Delete)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}"]
						},
						"description": "Permanently removes session from Redis (complete deletion)"
					}
				}
			]
		},
		{
			"name": "Maintenance & Admin",
			"item": [
				{
					"name": "Manual Session Cleanup",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/cleanup",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "cleanup"]
						},
						"description": "Manually triggers cleanup of inactive sessions"
					}
				}
			]
		},
		{
			"name": "Complete Workflows",
			"item": [
				{
					"name": "Full Session Lifecycle",
					"item": [
						{
							"name": "1. Create Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set('workflow_session_id', jsonData.sessionId);",
											"    pm.test('Session created with active=true', function() {",
											"        pm.expect(jsonData.active).to.eql(true);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sessionId\": \"workflow-{{$randomUUID}}\",\n  \"clientId\": \"test-client\",\n  \"clientHost\": \"localhost\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/sessions",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions"]
								}
							}
						},
						{
							"name": "2. Send Heartbeat",
							"request": {
								"method": "PUT",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lastChunk\": \"0001.mp4\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/heartbeat",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "heartbeat"]
								}
							}
						},
						{
							"name": "3. Update Status to Recording",
							"request": {
								"method": "PUT",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"RECORDING\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "status"]
								}
							}
						},
						{
							"name": "4. Update Recording Path",
							"request": {
								"method": "PUT",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"recordingPath\": \"/recordings/{{workflow_session_id}}/video.mp4\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/recording-path",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "recording-path"]
								}
							}
						},
						{
							"name": "5. Verify Session Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Session is active', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/active",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "active"]
								}
							}
						},
						{
							"name": "6. Deactivate Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Session deactivated', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql('INACTIVE');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/deactivate",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "deactivate"]
								}
							}
						},
						{
							"name": "7. Verify Session Inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Session is inactive', function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}/active",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}", "active"]
								}
							}
						},
						{
							"name": "8. Session Still Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Session exists but inactive', function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}"]
								}
							}
						},
						{
							"name": "9. Remove Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset('workflow_session_id');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sessions/{{workflow_session_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "sessions", "{{workflow_session_id}}"]
								}
							}
						}
					],
					"description": "Complete workflow: Create → Heartbeat → Update Status → Update Path → Verify Active → Deactivate → Verify Inactive → Confirm Exists → Remove"
				}
			]
		},
		{
			"name": "Error Scenarios",
			"item": [
				{
					"name": "Create Duplicate Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Duplicate creation fails', function() {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('already exists');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionId\": \"{{session_id}}\",\n  \"clientId\": \"test-client\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions"]
						},
						"description": "Try to create a session that already exists"
					}
				},
				{
					"name": "Invalid Status Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid status rejected', function() {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('Invalid status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"INVALID_STATUS\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/sessions/{{session_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "{{session_id}}", "status"]
						}
					}
				},
				{
					"name": "Heartbeat Non-existent Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns 404 for non-existent session', function() {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sessions/non-existent/heartbeat",
							"host": ["{{base_url}}"],
							"path": ["api", "sessions", "non-existent", "heartbeat"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.collectionVariables.get('base_url')) {",
					"    pm.collectionVariables.set('base_url', 'http://localhost:8080');",
					"}",
					"if (!pm.collectionVariables.get('username')) {",
					"    pm.collectionVariables.set('username', 'recorder');",
					"}",
					"if (!pm.collectionVariables.get('password')) {",
					"    pm.collectionVariables.set('password', 'rec0rd3r_2024!');",
					"}",
					"if (!pm.collectionVariables.get('session_id')) {",
					"    pm.collectionVariables.set('session_id', 'test-session-001');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Response is valid JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	]
}
