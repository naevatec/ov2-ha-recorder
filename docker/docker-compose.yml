version: '3.8'

services:
  # MinIO service for object storage during development/testing
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_API_PORT:-9000}:9000"      # MinIO API
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # MinIO Console
    environment:
      MINIO_ROOT_USER: ${HA_AWS_ACCESS_KEY:-naeva_minio}
      MINIO_ROOT_PASSWORD: ${HA_AWS_SECRET_KEY:-N43v4t3c_M1n10}
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio/data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ov-ha-recorder

  # MinIO Client for bucket creation and management
  minio-mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${HA_AWS_ACCESS_KEY:-naeva_minio}
      MINIO_ROOT_PASSWORD: ${HA_AWS_SECRET_KEY:-N43v4t3c_M1n10}
      MINIO_BUCKET_NAME: ${HA_AWS_S3_BUCKET:-ov-recordings}
    entrypoint: >
      /bin/sh -c "
      echo 'Setting up MinIO...';
      echo 'Using credentials: $HA_AWS_ACCESS_KEY / [password hidden]';
      echo 'Creating bucket: $HA_AWS_S3_BUCKET';
      /usr/bin/mc alias set local http://minio:9000 $HA_AWS_ACCESS_KEY $HA_AWS_SECRET_KEY;
      /usr/bin/mc mb local/$HA_AWS_S3_BUCKET --ignore-existing;
      /usr/bin/mc policy set public local/$HA_AWS_S3_BUCKET;
      echo 'MinIO setup completed successfully';
      "
    networks:
      - ov-ha-recorder

  # Redis service for OV Recorder HA Controller
  redis:
    image: redis:7-alpine
    container_name: ov-recorder-redis
    # No external port exposure - internal only
    # For testing
    ports:
      - 15336:6379
    volumes:
      - ./data/redis/data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - ov-ha-recorder

  # OV Recorder HA Controller service
  ov-recorder-ha-controller:
    build:
      context: server
      dockerfile: Dockerfile
      additional_contexts:
        sources: "../"
    container_name: ov-recorder-ha-controller
    ports:
      - "${HA_RECORDER_PORT:-8080}:8080"
    environment:
      # Redis connection
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      # Security
      - APP_SECURITY_USERNAME=${HA_RECORDER_USERNAME:-recorder}
      - APP_SECURITY_PASSWORD=${HA_RECORDER_PASSWORD:-rec0rd3r_2024!}
      # Session management
      - APP_SESSION_CLEANUP_INTERVAL=${HA_SESSION_CLEANUP_INTERVAL:-30000}
      - APP_SESSION_MAX_INACTIVE_TIME=${HA_SESSION_MAX_INACTIVE_TIME:-600}
      # MinIO integration (for future use - but no dependency needed)
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${HA_AWS_ACCESS_KEY:-naeva_minio}
      - MINIO_SECRET_KEY=${HA_AWS_SECRET_KEY:-N43v4t3c_M1n10}
      - MINIO_BUCKET=${HA_AWS_S3_BUCKET:-ov-recordings}
      # Application profile
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      - redis
      # Removed minio-mc dependency - HA Controller doesn't need MinIO to be ready
    restart: unless-stopped
    networks:
      - ov-ha-recorder
    volumes:
      - ./data/controller/logs:/app/logs
    profiles:
      - ha-controller
      - test

  # Your custom OpenVidu recording image
  openvidu-recording:
    build:
      context: ./recorder
      dockerfile: Dockerfile
      args:
        - TAG=${TAG:-latest}
    image: openvidu/openvidu-recording:${TAG:-latest}
    container_name: openvidu-recording-${TAG:-latest}
    depends_on:
      - minio-mc
      - ov-recorder-ha-controller
    environment:
      # MinIO connection settings (using your HA variable names)
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${HA_AWS_ACCESS_KEY:-naeva_minio}
      - MINIO_SECRET_KEY=${HA_AWS_SECRET_KEY:-N43v4t3c_M1n10}
      - MINIO_BUCKET=${HA_AWS_S3_BUCKET:-ov-recordings}
      # HA Recorder specific variables
      - HA_AWS_S3_SERVICE_ENDPOINT=${HA_AWS_S3_SERVICE_ENDPOINT}
      - HA_AWS_S3_BUCKET=${HA_AWS_S3_BUCKET:-ov-recordings}
      - HA_AWS_ACCESS_KEY=${HA_AWS_ACCESS_KEY:-naeva_minio}
      - HA_AWS_SECRET_KEY=${HA_AWS_SECRET_KEY:-N43v4t3c_M1n10}
      - MINIO_API_PORT=${MINIO_API_PORT:-9000}
      - HA_RECORDING_STORAGE=${HA_RECORDING_STORAGE:-local}
      - CHUNK_FOLDER=${CHUNK_FOLDER:-/local-chunks}
      - CHUNK_TIME_SIZE=${CHUNK_TIME_SIZE:-20}
      # HA Controller connection
      - HA_CONTROLLER_URL=http://ov-recorder-ha-controller:8080
      - HA_CONTROLLER_USERNAME=${HA_RECORDER_USERNAME:-recorder}
      - HA_CONTROLLER_PASSWORD=${HA_RECORDER_PASSWORD:-rec0rd3r_2024!}
      # Recording settings
      - RECORDING_PATH=/recordings
    volumes:
      - ./data/recorder/data:/recordings
      # Mount scripts and utils from recorder directory (within docker folder)
      - ./recorder/scripts:/scripts:ro
      - ./recorder/utils:/utils:ro
    networks:
      - ov-ha-recorder
    # Use profiles to control when recorder starts
    profiles:
      - recorder
      - test

volumes:
  # Keep named volume as fallback for other configurations
  minio_data:
    driver: local
  recordings_data:
    driver: local
  # Redis data is now using local bind mount: ./data/redis/data

networks:
  ov-ha-recorder:
    driver: bridge
